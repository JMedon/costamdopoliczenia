Public Function max(a, b)If a > b Thenmax = aElsemax = bEnd IfEnd FunctionPublic Function AlgoSortNow(ByVal ile As Double, ByRef zmienna() As Double, ByRef zmienna2() As Double, ByRef sredniZyskALL As Double, ByRef typeALL As Double, ByRef progOne As Double, ByRef progTwo As Double) As DoubleDim Threshold As DoubleDim Threshold2 As DoubleThreshold = 0.1Threshold2 = 1.3Dim Ycum1 As Par, Xval1 As Par, QtoStart1 As Par, QtoEnd1 As Par, Ycum2 As Par, Xval2 As Par, QtoStart2 As Par, QtoEnd2 As ParDim Solution1 As DoubleDim Solution2 As DoubleDim Solution As DoubleDim SredniZysk1 As DoubleDim SredniZysk2 As DoubleDim SredniZyskABS1a As DoubleDim SredniZyskABS2a As DoubleDim SredniZyskABS1b As DoubleDim SredniZyskABS2b As DoubleDim type1 As Double ' 1=LS 2=SL 0=NADim type2 As Double ' 3=LSL 4=SLS 0=NADim type1a As DoubleDim type2a As DoubleDim progOne1 As Double, progTwo1 As Double, progOne2 As Double, progTwo2 As DoubleReDim Zysk1(0 To ile) As DoubleReDim Zysk2(0 To ile) As Double  Ycum1.min = 10000000000#Ycum1.max = -100000000000#'Generate Ycum1 Xval1 .min .max   For m = 1 To ile      '====zysk      Zysk1(m) = Val(zmienna2(m) + Zysk1(max(1, m - 1)))      '====min      If Val(Zysk1(m)) < Ycum1.min Then '         Ycum1.min = Zysk1(m)         Xval1.min = zmienna(m)         QtoStart1.min = m / ile               End If      '===max      If Val(Zysk1(m)) > Ycum1.max Then  '         Ycum1.max = Zysk1(m)         Xval1.max = zmienna(m)         QtoStart1.max = m / ile      End If    Next mYcum1.start = 0Ycum1.end = Zysk1(ile)QtoEnd1.min = 1 - QtoStart1.minQtoEnd1.max = 1 - QtoStart1.maxIf QtoStart1.min < Threshold Then    QtoStart1.start = 1Else    QtoStart1.start = 0End IfIf QtoStart1.max < Threshold Then    QtoStart1.end = 1Else    QtoStart1.end = 0End IfIf QtoEnd1.min < Threshold Then    QtoEnd1.start = 1Else    QtoEnd1.start = 0End IfIf QtoEnd1.max < Threshold Then    QtoEnd1.end = 1Else    QtoEnd1.end = 0End If'generate pomocnicze absIf QtoStart1.end + QtoEnd1.end = 0 ThenSredniZyskABS1a = Ycum1.max + Abs(Ycum1.max - Ycum1.end)ElseSredniZyskABS1a = 0End IfIf QtoStart1.start + QtoEnd1.start = 0 ThenSredniZyskABS1b = -Ycum1.min + Abs(Ycum1.min - Ycum1.end)ElseSredniZyskABS1b = 0End IfSredniZysk1 = max(SredniZyskABS1a, SredniZyskABS1b)'Generate type1If SredniZyskABS1a > SredniZyskABS1b Then    type1a = 1Else    type1a = 2End IfIf type1a = 2 Then    If QtoStart1.start + QtoEnd1.start > 0 Then    type1 = 0    Else    type1 = 2    End IfElse    If QtoStart1.end + QtoEnd1.end > 0 Then    type1 = 0    Else    type1 = 1    End IfEnd If'Generate progOne1If type1 = 2 Then    progOne1 = Xval1.minElse    progOne1 = Xval1.maxEnd If'Generate Solution1If SredniZysk1 / Abs(Ycum1.end) < Threshold2 Or type1 = 0 Then    Solution1 = 0Else    Solution1 = 1End If'Choose SolutionIf Solution1 = 0 And Solution2 = 0 Then    Solution = 0ElseIf Solution1 = 0 Then    Solution = 2ElseIf Solution2 = 0 Then    Solution = 1ElseIf SredniZysk1 > SredniZysk2 Then    Solution = 1Else        Solution = 2End If'Generate Final SolutionIf Solution = 0 Then    typeALL = 0    progOne = 0    progTwo = 0    sredniZyskALL = 0ElseIf Solution = 1 Then    typeALL = type1    progOne = progOne1    progTwo = 0    sredniZyskALL = Round(SredniZysk1 / ile, 4)Else    typeALL = type2    progOne = progOne2    progTwo = progTwo2    sredniZyskALL = SredniZysk2End IfAlgoSortNow = 1             End FunctionPublic Function wynikSortowania(ByVal ile As Double, ByRef zmienna() As Double, ByRef zmienna2() As Double, ByRef sredniZyskF As Double, ByRef kierunekF As Double, ByRef progF As Double) As DoubleDim Ycum As Par, Xval As Par, QtoStart As Par, QtoEnd As Par, Ycum2 As Par, Xval2 As Par, QtoStart2 As Par, QtoEnd2 As ParDim Threshold As Double   ReDim Zysk(0 To ile) As Double   Dim minF  As Double 'minimum   Dim maxF  As Double ' maximum   Dim absF  As Double ' abs zmienna()   Dim progMinF  As Double ' prog minimum   Dim progMaxF  As Double '  prog maximum   Dim zyskK  As Double ' zysk na koniec   minF = 10000000000#   maxF = -100000000000#   Dim stat(0 To 10) As Double   Dim wynik(1 To 1) As Double   '=====POLICZENIE ZYSKU I INNYCH STATYSTYK   For m = 1 To ile - 1      '====zysk      Zysk(m) = Val(zmienna2(m) + Zysk(max(1, m - 1)))      '====min      If Val(Zysk(m)) < minF Then '         minF = Zysk(m)         progMinF = zmienna(m)      End If      '===max      If Val(Zysk(m)) > maxF Then  '         maxF = Zysk(m)         progMaxF = zmienna(m)      End If      '===abs      absF = absF + Abs(zmienna2(m))   Next m               '====wynik na koniec   zyskK = Zysk(ile - 1)   '====kierunek   If maxF + Abs(zyskK - maxF) > -minF + Abs(zyskK - minF) Then      kierunekF = -1   Else      kierunekF = 1   End If   '====sredni zysk   If kierunekF = 1 Then      sredniZyskF = Val(Round(Val(((-minF + Abs(zyskK - minF)) / Val(absF + 1))), 3))   Else      sredniZyskF = Val(Round(Val(((maxF + Abs(zyskK - maxF)) / Val(absF + 1))), 3))               End If           If kierunekF = 1 Then      wynikSortowania = progMinF 'prog   Else      wynikSortowania = progMaxF   End If                     End FunctionPublic Sub SortowanieDwoch(tabl, tabl2, lngMin, lngMax)   On Error Resume Next   Dim l As Long   Dim p As Long   Dim med   Dim Temp   Dim temp1       If IsEmpty(tabl) Then      Exit Sub   End If   If InStr(TypeName(tabl), "()") < 1 Then  'IsArray() is somewhat broken: Look for brackets in the type name      Exit Sub   End If   If lngMin = -1 Then      lngMin = LBound(tabl)   End If   If lngMax = -1 Then      lngMax = UBound(tabl)   End If   If lngMin >= lngMax Then    ' no sorting required      Exit Sub   End If   l = lngMin   p = lngMax   If lngMin < lngMax Then      l = lngMin      p = lngMax      med = tabl(l)      Do         While tabl(l) < med            l = l + 1         Wend         While tabl(p) > med            p = p - 1         Wend         If l <= p Then            Temp = tabl(l)            tabl(l) = tabl(p)            tabl(p) = Temp                temp1 = tabl2(l)            tabl2(l) = tabl2(p)            tabl2(p) = temp1                  l = l + 1            p = p - 1         End If      Loop Until l >= p      Call SortowanieDwoch(tabl, tabl2, lngMin, p)      Call SortowanieDwoch(tabl, tabl2, l, lngMax)   End IfEnd Sub
