

 
 
  @
 
 
  @
 
 
  @
 
 
  Global wynikInSample As Double,
  sredniZysk As Double, sharpeRatio As Double, sredniZyskALL As Double, typeALL
  As Double, progOne As Double, progTwo As Double@
 
 
  @
 
 
  Public Type Par@
 
 
    
  min As Double@
 
 
    
  max As Double@
 
 
    
  start As Double@
 
 
    
  end  As Double@
 
 
  End Type@
 
 
  @
 
 
  Sub Algo1()@
 
 
    
  '---------------------------------------------------------------------------------------@
 
 
    
  ' Method : Algo@
 
 
    
  ' Author : Jakub Medon@
 
 
    
  ' Date   : 2016-11-24@
 
 
    
  ' Purpose: algo sort@
 
 
    
  ' TODO:@
 
 
    
  '@
 
 
     
  'sprawdzic dzialanie algosort@
 
 
     
  'dlaczego mi nie wybiera dobrego typu@
 
 
     
  'dodac wynik na calej bazie danych@
 
 
     
  'dyskusyjne algo do filtrowania typu@
 
 
     
  @
 
 
    
  'Input Settings:@
 
 
    
  'inSample.start@
 
 
    
  'inSample.end@
 
 
    
  'outSample.end@
 
 
    
  'typeSettings@
 
 
    
  'typeVariable@
 
 
    
  '@
 
 
    
  '@
 
 
    
  'data@
 
 
    
  'X@
 
 
    
  'Y@
 
 
    
  '@
 
 
    
  'Output:@
 
 
    
  'kierunki@
 
 
    
  'wynikSharpe, typ zmiennej, typLSL, prog1,prog2@
 
 
    
  '@
 
 
    
  'type: 1=LS 2=SL 0=NA  3=LSL
  4=SLS 0=NA@
 
 
    
  'typeSettings : 0=all, -1=only LS/SL -2 = only LSL/SLS, 1,2,3,4=types@
 
 
  @
 
 
    
  '---------------------------------------------------------------------------------------@
 
 
    
  On Error GoTo MojaProce_Error@
 
 
    
  With Application@
 
 
       
  .ScreenUpdating = False@
 
 
       
  .Calculation = xlCalculationManual@
 
 
       
  .UseSystemSeparators = False@
 
 
       
  .DecimalSeparator = "."@
 
 
    
  End With@
 
 
  '-START---------------------------------------------------@
 
 
  Dim inSample As Par@
 
 
  Dim outSample As Par@
 
 
  inSample.start = 200001010000#@
 
 
  inSample.end = 201501010000#@
 
 
  outSample.end = 201601010000#@
 
 
  'X_type = 2 '1=nominal 2=returns@
 
 
  Debug.Print ""@
 
 
  Debug.Print "Starting run
  AlgoSort"@
 
 
  '####################### count
  rozmiarWierszy ######################@
 
 
  'count number of event in variable@
 
 
  Set fs =
  CreateObject("Scripting.FileSystemObject")@
 
 
  PATCHstr =
  "C:\Users\medonj\MOJE\model sortowania\In"@
 
 
  @
 
 
  ChDir PATCHstr@
 
 
  strplik = Dir(PATCHstr &
  "\*.csv") '#@
 
 
     
  @
 
 
  Open PATCHstr & "\" &
  strplik For Input As #3@
 
 
  rozmiarWierszy = 0@
 
 
  Do While Not EOF(3)@
 
 
     
  Line Input #3, Textline@
 
 
         
  rozmiarWierszy = rozmiarWierszy + 1@
 
 
  Loop@
 
 
  Close #3@
 
 
     
  @
 
 
  '####################### 'read data
  ######################@
 
 
  ReDim Temp(1 To rozmiarWierszy, 1 To 6)
  As Double@
 
 
  ReDim TempOut(1 To rozmiarWierszy, 1 To
  6) As Double@
 
 
  ReDim TempAll(1 To rozmiarWierszy, 1 To
  6) As Double@
 
 
  @
 
 
  Open PATCHstr & "\" &
  strplik For Input As #3@
 
 
  i = 1@
 
 
  e = 1@
 
 
  X_Last = 0@
 
 
  Do While Not EOF(3)@
 
 
     
  Line Input #3, Textline@
 
 
     
  Arrcells = Split(Textline, ",")@
 
 
  @
 
 
     
  Data_temp = Val(Arrcells(0))@
 
 
     
  X_temp = Val(Arrcells(1))@
 
 
     
  Y_temp = Val(Arrcells(2))@
 
 
     
  @
 
 
     
  'In sample data@
 
 
     
  If Data_temp > inSample.start And Data_temp < inSample.end And
  X_temp <> "" And Y_temp <> 0 Then@
 
 
         
  Temp(i, 1) = Data_temp@
 
 
         
  Temp(i, 2) = X_temp@
 
 
         
  Temp(i, 3) = Y_temp@
 
 
         
  Temp(i, 4) = X_temp - X_Last@
 
 
         
  If i = 1 Then@
 
 
              Temp(i, 5) = X_temp / 1@
 
 
              Temp(i, 6) = Temp(i, 4) / 1@
 
 
         
  Else@
 
 
              Temp(i, 5) = X_temp / Temp(i - 1,
  3)@
 
 
              Temp(i, 6) = Temp(i, 4) / Temp(i
  - 1, 3)@
 
 
         
  End If@
 
 
         
  @
 
 
         
  @
 
 
         
  i = i + 1@
 
 
     
  End If@
 
 
     
  X_Last = X_temp@
 
 
     
  @
 
 
     
  'Out of sample data@
 
 
     
  If Data_temp >= inSample.end And Data_temp < outSample.end And
  X_temp <> "" And Y_temp <> 0 Then@
 
 
         
  TempOut(e, 1) = Data_temp@
 
 
         
  TempOut(e, 2) = X_temp@
 
 
         
  TempOut(e, 3) = Y_temp@
 
 
         
  TempOut(e, 4) = X_temp - X_Last@
 
 
         
  If e = 1 Then@
 
 
              TempOut(e, 5) = X_temp / 1@
 
 
              TempOut(e, 6) = TempOut(e, 4) /
  1@
 
 
         
  Else@
 
 
              TempOut(e, 5) = X_temp /
  TempOut(e - 1, 3)@
 
 
              TempOut(e, 6) = TempOut(e, 4) /
  TempOut(e - 1, 3)@
 
 
         
  End If@
 
 
         
  @
 
 
         
  e = e + 1@
 
 
     
  End If@
 
 
     
  @
 
 
     
  X_Last = X_temp@
 
 
  Loop@
 
 
  Close #3@
 
 
  @
 
 
  '####################### generate
  filtered variables ######################'@
 
 
  rozmiarWierszy = i@
 
 
  rozmiarOut = e@
 
 
  'in sample@
 
 
  ReDim D(1 To rozmiarWierszy) As Double@
 
 
  ReDim X(1 To rozmiarWierszy) As Double@
 
 
  ReDim X_return(1 To rozmiarWierszy) As
  Double@
 
 
  ReDim X_div(1 To rozmiarWierszy) As
  Double@
 
 
  ReDim X_div_return(1 To rozmiarWierszy)
  As Double@
 
 
  ReDim Y(1 To rozmiarWierszy) As Double@
 
 
  @
 
 
  For u = 1 To rozmiarWierszy@
 
 
     
  D(u) = Temp(u, 1)@
 
 
     
  X(u) = Temp(u, 2)@
 
 
     
  Y(u) = Temp(u, 3)@
 
 
     
  X_return(u) = Temp(u, 4)@
 
 
     
  X_div(u) = Temp(u, 5)@
 
 
     
  X_div_return(u) = Temp(u, 6)@
 
 
  Next u@
 
 
  @
 
 
  'out of sample@
 
 
  ReDim D_Out(1 To rozmiarOut) As Double@
 
 
  ReDim X_Out(1 To rozmiarOut) As Double@
 
 
  ReDim X_return_Out(1 To rozmiarOut) As
  Double@
 
 
  ReDim X_div_Out(1 To rozmiarOut) As
  Double@
 
 
  ReDim X_div_return_Out(1 To rozmiarOut)
  As Double@
 
 
  ReDim Y_Out(1 To rozmiarOut) As Double@
 
 
  ReDim K_nominal(1 To rozmiarOut) As
  Double@
 
 
  ReDim K_Sharpe(1 To rozmiarOut) As
  Double@
 
 
  @
 
 
  For u = 1 To rozmiarOut@
 
 
     
  D_Out(u) = TempOut(u, 1)@
 
 
     
  X_Out(u) = TempOut(u, 2)@
 
 
     
  Y_Out(u) = TempOut(u, 3)@
 
 
     
  X_return_Out(u) = TempOut(u, 4)@
 
 
     
  X_div_Out(u) = TempOut(u, 5)@
 
 
     
  X_div_return_Out(u) = TempOut(u, 6)@
 
 
  Next u@
 
 
  @
 
 
  'All sample@
 
 
  ReDim D_All(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  ReDim X_All(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  ReDim X_return_All(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  ReDim X_div_All(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  ReDim X_div_return_All(1 To
  rozmiarWierszy + rozmiarOut) As Double@
 
 
  ReDim X_best(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  ReDim Y_All(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  ReDim K_nominal_All(1 To rozmiarWierszy
  + rozmiarOut) As Double@
 
 
  ReDim K_Sharpe_All(1 To rozmiarWierszy +
  rozmiarOut) As Double@
 
 
  @
 
 
  For u = 1 To rozmiarWierszy +
  rozmiarOut@
 
 
     
  If u <= rozmiarWierszy Then@
 
 
         
  D_All(u) = D(u)@
 
 
         
  X_All(u) = X(u)@
 
 
         
  Y_All(u) = Y(u)@
 
 
         
  X_return_All(u) = X_return(u)@
 
 
         
  X_div_All(u) = X_div(u)@
 
 
         
  X_div_return_All(u) = X_div_return(u)@
 
 
     
  Else@
 
 
         
  D_All(u) = D_Out(u - rozmiarWierszy)@
 
 
         
  X_All(u) = X_Out(u - rozmiarWierszy)@
 
 
         
  Y_All(u) = Y_Out(u - rozmiarWierszy)@
 
 
         
  X_return_All(u) = X_return_Out(u - rozmiarWierszy)@
 
 
         
  X_div_All(u) = X_div_Out(u - rozmiarWierszy)@
 
 
         
  X_div_return_All(u) = X_div_return_Out(u - rozmiarWierszy)@
 
 
     
  End If@
 
 
  Next u@
 
 
  @
 
 
  @
 
 
  ReDim wynik(1 To 5, 1 To 3) As Double@
 
 
  Debug.Print "###############"@
 
 
  typeSettings = 2  '0=all, -1=only LS/SL -2 = only LSL/SLS,
  1,2,3,4=types@
 
 
  Debug.Print "typeSettings: ";
  typeSettings@
 
 
  @
 
 
  lewy = LBound(X, 1):    prawy = UBound(X, 1)@
 
 
  '####################### Algo Sort
  nominal ######################'@
 
 
  SortowanieDwoch X, Y, lewy, prawy@
 
 
  wynik(1, 1) =
  AlgoSortNow(rozmiarWierszy, X, Y, sredniZyskALL, typeALL, progOne, progTwo,
  typeSettings)@
 
 
  Debug.Print "AlgoSort
  nominal:", sredniZyskALL, typeALL, progOne, progTwo@
 
 
  wynik(1, 2) =
  wynikOutofSample(rozmiarOut, X_Out, Y_Out, K_nominal, K_Sharpe,
  wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)@
 
 
  wynik(1, 3) = typeALL@
 
 
  Debug.Print "wynik AlgoSort
  nominal: ", rozmiarOut; wynik(1, 2); wynik(1, 1); sredniZysk;
  sharpeRatio; typeALL; progOne; progTwo@
 
 
  @
 
 
  '####################### Algo Sort
  returns ######################'@
 
 
  SortowanieDwoch X_return, Y, lewy,
  prawy@
 
 
  wynik(2, 1) =
  AlgoSortNow(rozmiarWierszy, X_return, Y, sredniZyskALL, typeALL, progOne,
  progTwo, typeSettings)@
 
 
  Debug.Print "AlgoSort
  returns:", sredniZyskALL, typeALL, progOne, progTwo@
 
 
  wynik(2, 2) =
  wynikOutofSample(rozmiarOut, X_return_Out, Y_Out, K_nominal, K_Sharpe,
  wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)@
 
 
  wynik(2, 3) = typeALL@
 
 
  Debug.Print "wynik AlgoSort
  returns: ", rozmiarOut; wynik(2, 2); wynik(2, 1); sredniZysk;
  sharpeRatio; typeALL; progOne; progTwo@
 
 
  @
 
 
  '####################### Algo Sort div
  ######################'@
 
 
  SortowanieDwoch X_div, Y, lewy, prawy@
 
 
  wynik(3, 1) =
  AlgoSortNow(rozmiarWierszy, X_div, Y, sredniZyskALL, typeALL, progOne,
  progTwo, typeSettings)@
 
 
  Debug.Print "AlgoSort
  returns:", sredniZyskALL, typeALL, progOne, progTwo@
 
 
  wynik(3, 2) =
  wynikOutofSample(rozmiarOut, X_div_Out, Y_Out, K_nominal, K_Sharpe,
  wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)@
 
 
  wynik(3, 3) = typeALL@
 
 
  Debug.Print "wynik AlgoSort div :
  ", rozmiarOut; wynik(3, 2); wynik(3, 1); sredniZysk; sharpeRatio;
  typeALL; progOne; progTwo@
 
 
  @
 
 
  '####################### Algo Sort div
  return ######################'@
 
 
  SortowanieDwoch X_div_return, Y, lewy,
  prawy@
 
 
  wynik(4, 1) =
  AlgoSortNow(rozmiarWierszy, X_div_return, Y, sredniZyskALL, typeALL, progOne,
  progTwo, typeSettings)@
 
 
  Debug.Print "AlgoSort
  returns:", sredniZyskALL, typeALL, progOne, progTwo@
 
 
  wynik(4, 2) =
  wynikOutofSample(rozmiarOut, X_div_return_Out, Y_Out, K_nominal, K_Sharpe,
  wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)@
 
 
  wynik(4, 3) = typeALL@
 
 
  Debug.Print "wynik AlgoSort div
  rtrns: ", rozmiarOut; wynik(4, 2); wynik(4, 1); sredniZysk; sharpeRatio;
  typeALL; progOne; progTwo@
 
 
  @
 
 
  'Debug.Print wynik(1, 1); wynik(2, 1);
  wynik(3, 1); wynik(4, 1)@
 
 
  'choose best X variable@
 
 
  For u = 1 To 4@
 
 
     
  If wynik(u, 2) <= 0 Then@
 
 
         
  wynik(u, 1) = -100@
 
 
     
  End If@
 
 
  Next u@
 
 
  @
 
 
  bestWynik = -100@
 
 
  bestVariable = 0@
 
 
  bestTypeAll = 0@
 
 
  For u = 1 To 4@
 
 
     
  If wynik(u, 1) > bestWynik Then@
 
 
         
  bestVariable = u@
 
 
         
  bestTypeAll = wynik(u, 3)@
 
 
         
  bestWynik = wynik(u, 1)@
 
 
     
  End If@
 
 
  Next u@
 
 
  @
 
 
  Debug.Print
  "-----------------------------"@
 
 
  rozmiarALL = rozmiarWierszy +
  rozmiarOut@
 
 
  Debug.Print "bestVariable: ";
  bestVariable@
 
 
  Debug.Print "bestTypeAll: ";
  bestTypeAll@
 
 
  If bestVariable = 0 Then@
 
 
     
  Debug.Print "nie ma zyskownej w out of sample"@
 
 
  Else@
 
 
     
  For u = 1 To rozmiarWierszy + rozmiarOut@
 
 
         
  If bestVariable = 1 Then@
 
 
              X_best(u) = X_All(u)@
 
 
         
  ElseIf bestVariable = 2 Then@
 
 
              X_best(u) = X_return_All(u)@
 
 
         
  ElseIf bestVariable = 3 Then@
 
 
              X_best(u) = X_div_All(u)@
 
 
         
  ElseIf bestVariable = 4 Then@
 
 
              X_best(u) = X_div_return_All(u)@
 
 
         
  End If@
 
 
     
  Next u@
 
 
     
  '####################### Algo Sort All ######################'@
 
 
     
  lewy = LBound(Y_All, 1):   
  prawy = UBound(Y_All, 1)@
 
 
   '  
  Debug.Print X_best(180); X_div_All(180); rozmiarALL@
 
 
     
  typeSettings = bestTypeAll@
 
 
     
  SortowanieDwoch X_best, Y_All, lewy, prawy@
 
 
     
  wynik(5, 1) = AlgoSortNow(rozmiarALL, X_best, Y_All, sredniZyskALL,
  typeALL, progOne, progTwo, bestTypeAll)@
 
 
   '  
  Debug.Print "AlgoSort All:    
  ", sredniZyskALL, typeALL, progOne, progTwo@
 
 
     
  wynik(5, 2) = wynikOutofSample(rozmiarALL, X_best, Y_All,
  K_nominal_All, K_Sharpe_All, wynikInSample, sredniZysk, sharpeRatio, typeALL,
  progOne, progTwo)@
 
 
     
  Debug.Print "GOTOWE AlgoSort All: ", "wynikOutSharpe:
  "; wynik(5, 2), "BestVariable: "; bestVariable, "typeALL:
  "; typeALL, "progOne: "; progOne, "progTwo: ";
  progTwo@
 
 
  End If@
 
 
  'wynikSharpe, typ zmiennej, typLSL,
  prog1,prog2@
 
 
  Debug.Print "End fo
  AlgoSort..."@
 
 
  @
 
 
  @
 
 
  @
 
 
  '-END---------------------------------------------------@
 
 
  MojaProce_Error:@
 
 
    
  With Application@
 
 
       
  .Calculation = xlCalculationAutomatic@
 
 
       
  .ScreenUpdating = True@
 
 
       
  .CutCopyMode = False@
 
 
    
  End With@
 
 
  End Sub@
 
 
  @
 
 
  Public Function max(a, b)@
 
 
  If a > b Then@
 
 
  max = a@
 
 
  Else@
 
 
  max = b@
 
 
  End If@
 
 
  @
 
 
  @
 
 
  End Function@
 
 
  @
 
 
  Public Function AlgoSortNow(ByVal ile As
  Double, ByRef zmienna() As Double, ByRef zmienna2() As Double, ByRef
  sredniZyskALL As Double, ByRef typeALL As Double, ByRef progOne As Double,
  ByRef progTwo As Double, ByVal typeSettings As Double) As Double@
 
 
  @
 
 
  Dim Threshold As Double@
 
 
  Dim Threshold2 As Double@
 
 
  Threshold = 0.1@
 
 
  Threshold2 = 1.3@
 
 
  @
 
 
  Dim Ycum1 As Par, Xval1 As Par,
  QtoStart1 As Par, QtoEnd1 As Par, Ycum2 As Par, Xval2 As Par, QtoStart2 As
  Par, QtoEnd2 As Par, QtoReal2 As Par@
 
 
  @
 
 
  Dim Solution1 As Double@
 
 
  Dim Solution2 As Double@
 
 
  Dim Solution As Double@
 
 
  Dim SredniZysk1 As Double@
 
 
  Dim SredniZysk2 As Double@
 
 
  Dim SredniZyskABS1a As Double@
 
 
  Dim SredniZyskABS2a As Double@
 
 
  Dim SredniZyskABS1b As Double@
 
 
  Dim SredniZyskABS2b As Double@
 
 
  Dim type1 As Double ' 1=LS 2=SL 0=NA@
 
 
  Dim type2 As Double ' 3=LSL 4=SLS 0=NA@
 
 
  Dim type1a As Double@
 
 
  Dim type2a As Double@
 
 
  @
 
 
  @
 
 
  @
 
 
  Dim progOne1 As Double, progTwo1 As
  Double, progOne2 As Double, progTwo2 As Double@
 
 
  @
 
 
  ReDim Zysk1(0 To ile) As Double@
 
 
  ReDim Zysk2(0 To ile) As Double@
 
 
  Zysk1(0) = 0@
 
 
  Zysk2(0) = 0@
 
 
  ReDim ZyskWynik1(1 To ile) As Double@
 
 
  ReDim ZyskWynik2(1 To ile) As Double@
 
 
  @
 
 
  ile = ile - 1@
 
 
  Ycum1.min = 10000000000#@
 
 
  Ycum1.max = -100000000000#@
 
 
  Ycum2.min = 10000000000#@
 
 
  Ycum2.max = -100000000000#@
 
 
  @
 
 
  'Generate Ycum1 Xval1 .min .max@
 
 
    
  For m = 1 To ile@
 
 
       
  '====zysk@
 
 
       
  Zysk1(m) = Val(zmienna2(m) + Zysk1(m - 1))@
 
 
       
  '====min@
 
 
       
  If Val(Zysk1(m)) < Ycum1.min Then '@
 
 
          
  Ycum1.min = Zysk1(m)@
 
 
          
  Xval1.min = zmienna(m)@
 
 
          
  QtoStart1.min = m / ile@
 
 
          
  @
 
 
       
  End If@
 
 
       
  '===max@
 
 
       
  If Val(Zysk1(m)) > Ycum1.max Then 
  '@
 
 
          
  Ycum1.max = Zysk1(m)@
 
 
          
  Xval1.max = zmienna(m)@
 
 
          
  QtoStart1.max = m / ile@
 
 
       
  End If@
 
 
     
  Next m@
 
 
  @
 
 
  'Count Variables@
 
 
  Ycum1.start = 0@
 
 
  Ycum1.end = Zysk1(ile)@
 
 
  QtoEnd1.min = 1 - QtoStart1.min@
 
 
  QtoEnd1.max = 1 - QtoStart1.max@
 
 
  If QtoStart1.min < Threshold Then@
 
 
     
  QtoStart1.start = 1@
 
 
  Else@
 
 
     
  QtoStart1.start = 0@
 
 
  End If@
 
 
  If QtoStart1.max < Threshold Then@
 
 
     
  QtoStart1.end = 1@
 
 
  Else@
 
 
     
  QtoStart1.end = 0@
 
 
  End If@
 
 
  If QtoEnd1.min < Threshold Then@
 
 
     
  QtoEnd1.start = 1@
 
 
  Else@
 
 
     
  QtoEnd1.start = 0@
 
 
  End If@
 
 
  If QtoEnd1.max < Threshold Then@
 
 
     
  QtoEnd1.end = 1@
 
 
  Else@
 
 
     
  QtoEnd1.end = 0@
 
 
  End If@
 
 
  @
 
 
  @
 
 
  'generate pomocnicze abs@
 
 
  If QtoStart1.end + QtoEnd1.end = 0 And
  typeSettings <> 2 Then@
 
 
  SredniZyskABS1a = Ycum1.max +
  Abs(Ycum1.max - Ycum1.end) + 1 'dlaczego dwojka?@
 
 
  Else@
 
 
  SredniZyskABS1a = 0@
 
 
  End If@
 
 
  If QtoStart1.start + QtoEnd1.start = 0
  And typeSettings <> 1 Then@
 
 
  SredniZyskABS1b = -Ycum1.min +
  Abs(Ycum1.min - Ycum1.end) + 1@
 
 
  Else@
 
 
  SredniZyskABS1b = 0@
 
 
  End If@
 
 
  @
 
 
  SredniZysk1 = max(SredniZyskABS1a,
  SredniZyskABS1b)@
 
 
  @
 
 
  'Generate type1@
 
 
  If SredniZyskABS1a > SredniZyskABS1b
  Then@
 
 
     
  type1a = 1@
 
 
  Else@
 
 
     
  type1a = 2@
 
 
  End If@
 
 
  @
 
 
  If type1a = 2 Then@
 
 
     
  If QtoStart1.start + QtoEnd1.start > 0 Then@
 
 
     
  type1 = 0@
 
 
     
  Else@
 
 
     
  type1 = 2@
 
 
     
  End If@
 
 
  Else@
 
 
     
  If QtoStart1.end + QtoEnd1.end > 0 Then@
 
 
     
  type1 = 0@
 
 
     
  Else@
 
 
     
  type1 = 1@
 
 
     
  End If@
 
 
  End If@
 
 
  @
 
 
  'Generate progOne1@
 
 
  If type1 = 2 Then@
 
 
     
  progOne1 = Xval1.min@
 
 
  Else@
 
 
     
  progOne1 = Xval1.max@
 
 
  End If@
 
 
  @
 
 
  'Generate Solution1@
 
 
  If SredniZysk1 / Abs(Ycum1.end) <
  Threshold2 Or type1 = 0 Then@
 
 
     
  Solution1 = 0@
 
 
  Else@
 
 
     
  Solution1 = 1@
 
 
     
  @
 
 
     
  'Generate zyskWynik for LS/SL@
 
 
     
  For m = 1 To ile@
 
 
       
  '====zysk@
 
 
       
  If type1 = 1 Then@
 
 
         
  ZyskWynik1(m) = zmienna2(m) * Sgn(zmienna(m) - progOne1) * -1@
 
 
       
  Else@
 
 
         
  ZyskWynik1(m) = zmienna2(m) * Sgn(zmienna(m) - progOne1)@
 
 
       
  End If@
 
 
     
  Next m@
 
 
  End If@
 
 
  @
 
 
  @
 
 
     
  @
 
 
  @
 
 
  '##############################################################@
 
 
  '########################### LSL
  ##############################@
 
 
  @
 
 
  'Generate Ycum2 Xval2 .min .max@
 
 
  For m = 1 To ile@
 
 
       
  '====zysk@
 
 
       
  Zysk2(m) = Val(zmienna2(m) + Zysk2(m - 1)) - Ycum1.end / ile 'odjecie
  sredniej z zysku Ycum1@
 
 
       
  '====min@
 
 
       
  If Val(Zysk2(m)) < Ycum2.min Then '@
 
 
          
  Ycum2.min = Zysk2(m)@
 
 
          
  Xval2.min = zmienna(m)@
 
 
          
  QtoStart2.min = m / ile@
 
 
          
  QtoReal2.min = Zysk1(m)@
 
 
       
  End If@
 
 
       
  '===max@
 
 
       
  If Val(Zysk2(m)) > Ycum2.max Then 
  '@
 
 
          
  Ycum2.max = Zysk2(m)@
 
 
          
  Xval2.max = zmienna(m)@
 
 
          
  QtoStart2.max = m / ile@
 
 
          
  QtoReal2.max = Zysk1(m)@
 
 
       
  End If@
 
 
  Next m@
 
 
  @
 
 
  'Count Variables@
 
 
  Ycum2.start = Zysk2(1)@
 
 
  Ycum2.end = Zysk2(ile)@
 
 
  QtoEnd2.min = 1 - QtoStart2.min@
 
 
  QtoEnd2.max = 1 - QtoStart2.max@
 
 
  If QtoStart2.min < Threshold Then@
 
 
     
  QtoStart2.start = 1@
 
 
  Else@
 
 
     
  QtoStart2.start = 0@
 
 
  End If@
 
 
  If QtoStart2.max < Threshold Then@
 
 
     
  QtoStart2.end = 1@
 
 
  Else@
 
 
     
  QtoStart2.end = 0@
 
 
  End If@
 
 
  If QtoEnd2.min < Threshold Then@
 
 
     
  QtoEnd2.start = 1@
 
 
  Else@
 
 
     
  QtoEnd2.start = 0@
 
 
  End If@
 
 
  If QtoEnd2.max < Threshold Then@
 
 
     
  QtoEnd2.end = 1@
 
 
  Else@
 
 
     
  QtoEnd2.end = 0@
 
 
  End If@
 
 
  If Abs(QtoStart2.min - QtoStart2.max)
  < 2 * Threshold Then 'QtoReal2.end - to close to minmax@
 
 
     
  QtoReal2.end = 1@
 
 
  Else@
 
 
     
  QtoReal2.end = 0@
 
 
  End If@
 
 
  @
 
 
  'Generate type2@
 
 
  If Xval2.min > Xval2.max Then@
 
 
     
  type2a = 3@
 
 
  Else@
 
 
     
  type2a = 4@
 
 
  End If@
 
 
  @
 
 
  If type2a = 3 And typeSettings <>
  4 Then@
 
 
     
  If QtoStart2.end + QtoEnd2.start > 0 Then@
 
 
     
  type2 = 0@
 
 
     
  Else@
 
 
     
  type2 = 3@
 
 
     
  End If@
 
 
  ElseIf type2a = 4 And typeSettings
  <> 3 Then@
 
 
     
  If QtoStart2.start + QtoEnd2.end > 0 Then@
 
 
     
  type2 = 0@
 
 
     
  Else@
 
 
     
  type2 = 4@
 
 
     
  End If@
 
 
  Else@
 
 
  type2 = 0@
 
 
  @
 
 
  End If@
 
 
  @
 
 
  'Choose prog between real and averages
  method@
 
 
  If Abs(QtoStart1.min - QtoStart2.min)
  > Threshold * 3 Then@
 
 
     
  progOne2 = Xval2.min@
 
 
  Else@
 
 
     
  progOne2 = Xval1.min@
 
 
  End If@
 
 
  @
 
 
  If Abs(QtoStart1.max - QtoStart2.max)
  > Threshold * 3 Then@
 
 
     
  progTwo2 = Xval2.max@
 
 
  Else@
 
 
     
  progTwo2 = Xval1.max@
 
 
  End If@
 
 
  @
 
 
  'change values if progOne2>progTwo2@
 
 
  If progOne2 > progTwo2 Then@
 
 
     
  progTemp = progOne2@
 
 
     
  progOne2 = progTwo2@
 
 
     
  progTwo2 = progTemp@
 
 
  End If@
 
 
  @
 
 
  'Generate zyskWynik for LS/SL@
 
 
  For m = 1 To ile@
 
 
     
  If type2 = 3 Then@
 
 
         
  If zmienna(m) < progOne2 Then@
 
 
              ZyskWynik2(m) = 1 * zmienna2(m)@
 
 
         
  Else@
 
 
              ZyskWynik2(m) = Sgn(zmienna(m) -
  progTwo2) * zmienna2(m)@
 
 
         
  End If@
 
 
     
  Else@
 
 
         
  If zmienna(m) < progOne2 Then@
 
 
              ZyskWynik2(m) = -1 * zmienna2(m)@
 
 
         
  Else@
 
 
              ZyskWynik2(m) = Sgn(zmienna(m) -
  progTwo2) * -1 * zmienna2(m)@
 
 
         
  End If@
 
 
     
  End If@
 
 
     
  SredniZysk2 = SredniZysk2 + ZyskWynik2(m)@
 
 
  Next m@
 
 
  @
 
 
  @
 
 
  'Generate Solution2@
 
 
  If SredniZysk2 / max(Abs(Ycum1.end),
  SredniZysk1) < Threshold2 Or type2 = 0 Or QtoStart2.start + QtoStart2.end
  + QtoReal2.end > 0 Then@
 
 
     
  Solution2 = 0@
 
 
  Else@
 
 
     
  Solution2 = 1@
 
 
  End If@
 
 
  @
 
 
  'Choose best type by Sharpe@
 
 
  SredniZysk1 = Round(SredniZysk1 / ile,
  4)@
 
 
  SredniZysk2 = Round(SredniZysk2 / ile,
  4)@
 
 
  sharpe1 = Round(SredniZysk1 /
  StdDev(ile, ZyskWynik1), 4)@
 
 
  sharpe2 = Round(SredniZysk2 /
  StdDev(ile, ZyskWynik2), 4)@
 
 
  'Choose Solution@
 
 
  If Solution1 = 0 And Solution2 = 0 Then@
 
 
     
  Solution = 0@
 
 
  ElseIf Solution1 = 0 Or typeSettings =
  -2 Or typeSettings = 3 Or typeSettings = 4 Then@
 
 
     
  Solution = 2@
 
 
  ElseIf Solution2 = 0 Or typeSettings =
  -1 Or typeSettings = 1 Or typeSettings = 2 Then@
 
 
     
  Solution = 1@
 
 
  ElseIf sharpe1 > sharpe2 Then@
 
 
     
  Solution = 1@
 
 
  Else@
 
 
     
  Solution = 2@
 
 
  End If@
 
 
  @
 
 
  'Generate Final Solution@
 
 
  If Solution = 0 Then@
 
 
     
  typeALL = 0@
 
 
     
  progOne = 0@
 
 
     
  progTwo = 0@
 
 
     
  sredniZyskALL = 0@
 
 
  ElseIf Solution = 1 Then@
 
 
     
  typeALL = type1@
 
 
     
  progOne = progOne1@
 
 
     
  progTwo = 0@
 
 
     
  sredniZyskALL = sharpe1@
 
 
     
  sharpeALL = sharpe1@
 
 
  Else@
 
 
     
  typeALL = type2@
 
 
     
  progOne = progOne2@
 
 
     
  progTwo = progTwo2@
 
 
     
  sredniZyskALL = sharpe2@
 
 
     
  sharpeALL = sharpe2@
 
 
  End If@
 
 
  @
 
 
  @
 
 
  @
 
 
  AlgoSortNow = sharpeALL 'sharpeALL
  'Round(sredniZyskALL / StdDev(ile, Zysk()), 4) '' ZMIENIC NA SHARPE RATIO!!@
 
 
               @
 
 
  End Function@
 
 
  @
 
 
  Public Function wynikOutofSample(ByVal
  ile As Double, ByRef X_Out() As Double, ByRef Y_Out() As Double, ByRef
  K_nominal() As Double, ByRef K_Sharpe() As Double, ByRef InSampleSharpe As
  Double, ByRef sredniZysk As Double, ByRef sharpeRatio As Double, ByRef
  typeALL As Double, ByRef progOne As Double, ByRef progTwo As Double) As
  Double@
 
 
  @
 
 
  'ile = ile - 1@
 
 
  Dim OutZysk As Double@
 
 
  ReDim Zysk(1 To ile) As Double@
 
 
  ReDim K_nominal(1 To ile) As Double@
 
 
  ReDim K_Sharpe(1 To ile) As Double@
 
 
  @
 
 
  OutZysk = 0@
 
 
  'progOne = progOne + 0.00001@
 
 
  'progTwo = progTwo + 0.00001@
 
 
  For u = 1 To ile@
 
 
     
  If typeALL = 1 Then@
 
 
         
  K_nominal(u) = Sgn(X_Out(u) - progOne) * -1@
 
 
         
  Zysk(u) = K_nominal(u) * Y_Out(u)@
 
 
     
  ElseIf typeALL = 2 Then@
 
 
         
  K_nominal(u) = Sgn(X_Out(u) - progOne)@
 
 
         
  Zysk(u) = K_nominal(u) * Y_Out(u)@
 
 
     
  ElseIf typeALL = 3 Then@
 
 
         
  If X_Out(u) < progOne Then@
 
 
              K_nominal(u) = 1@
 
 
              Zysk(u) = K_nominal(u) *
  Y_Out(u)@
 
 
         
  Else@
 
 
              K_nominal(u) = Sgn(X_Out(u) -
  progTwo)@
 
 
              Zysk(u) = K_nominal(u) *
  Y_Out(u)@
 
 
         
  End If@
 
 
     
  ElseIf typeALL = 4 Then@
 
 
         
  If X_Out(u) < progOne Then@
 
 
              K_nominal(u) = -1@
 
 
              Zysk(u) = K_nominal(u) *
  Y_Out(u)@
 
 
         
  Else@
 
 
              K_nominal(u) = Sgn(X_Out(u) -
  progTwo) * -1@
 
 
              Zysk(u) = K_nominal(u) *
  Y_Out(u)@
 
 
         
  End If@
 
 
     
  Else@
 
 
         
  K_nominal(u) = 0@
 
 
         
  Zysk(u) = 0@
 
 
     
  End If@
 
 
     
  @
 
 
     
  OutZysk = OutZysk + Zysk(u)@
 
 
     
  K_Sharpe(u) = K_nominal(u) * InSampleSharpe@
 
 
  Next u@
 
 
  @
 
 
  If typeALL <> 0 Then@
 
 
     
  sredniZysk = Round(OutZysk / (ile), 4)@
 
 
     
  sharpeRatio = Round(sredniZysk / StdDev(ile, Zysk), 4) '@
 
 
     
  wynikOutofSample = Round(sharpeRatio, 4)@
 
 
  Else@
 
 
     
  sredniZysk = 0 'Round(OutZysk / ile, 4)@
 
 
     
  sharpeRatio = 0 'Round(sredniZysk / StdDev(ile, Zysk), 4) '@
 
 
     
  wynikOutofSample = 0 'Round(sharpeRatio, 4)@
 
 
  End If@
 
 
  @
 
 
               @
 
 
  End Function@
 
 
  '***********************************************************************@
 
 
   '*                                                      
  Mean                                                 
  *@
 
 
   '***********************************************************************@
 
 
   Function Mean(k As Double, Arr() As Double)@
 
 
       
  Dim Sum As Double@
 
 
       
  Dim i As Integer@
 
 
  @
 
 
       
  Sum = 0@
 
 
       
  For i = 1 To k@
 
 
           
  Sum = Sum + Arr(i)@
 
 
       
  Next i@
 
 
   
  @
 
 
       
  Mean = Sum / k@
 
 
  @
 
 
   End Function@
 
 
  @
 
 
  '************************************************************************@
 
 
   '*                                             
  Standard Deviation                                    *@
 
 
   '************************************************************************@
 
 
   Function StdDev(k As Double, Arr() As
  Double)@
 
 
       
  Dim i As Integer@
 
 
       
  Dim avg As Single, SumSq As Double@
 
 
   
  @
 
 
  @
 
 
      
  avg = Mean(k, Arr)@
 
 
       
  For i = 1 To k@
 
 
             SumSq = SumSq + (Arr(i) - avg) ^
  2@
 
 
       
  Next i@
 
 
         
  If SumSq = 0 Then@
 
 
              StdDev = 10000000000#@
 
 
         
  Else@
 
 
              StdDev = Sqr(SumSq / (k - 1))@
 
 
         
  End If@
 
 
   End Function@
 
 
   @
 
 
   Public Sub SortowanieDwoch(tabl, tabl2,
  lngMin, lngMax)@
 
 
    
  On Error Resume Next@
 
 
    
  Dim l As Long@
 
 
    
  Dim p As Long@
 
 
    
  Dim med@
 
 
    
  Dim Temp@
 
 
    
  Dim temp1@
 
 
  @
 
 
     
  @
 
 
    
  If IsEmpty(tabl) Then@
 
 
       
  Exit Sub@
 
 
    
  End If@
 
 
    
  If InStr(TypeName(tabl), "()") < 1 Then  'IsArray() is somewhat broken: Look for
  brackets in the type name@
 
 
       
  Exit Sub@
 
 
    
  End If@
 
 
    
  If lngMin = -1 Then@
 
 
       
  lngMin = LBound(tabl)@
 
 
    
  End If@
 
 
    
  If lngMax = -1 Then@
 
 
       
  lngMax = UBound(tabl)@
 
 
    
  End If@
 
 
    
  If lngMin >= lngMax Then    '
  no sorting required@
 
 
       
  Exit Sub@
 
 
    
  End If@
 
 
  @
 
 
    
  l = lngMin@
 
 
    
  p = lngMax@
 
 
  @
 
 
  @
 
 
    
  If lngMin < lngMax Then@
 
 
       
  l = lngMin@
 
 
       
  p = lngMax@
 
 
       
  med = tabl(l)@
 
 
       
  Do@
 
 
          
  While tabl(l) < med@
 
 
              l = l + 1@
 
 
          
  Wend@
 
 
          
  While tabl(p) > med@
 
 
              p = p - 1@
 
 
          
  Wend@
 
 
          
  If l <= p Then@
 
 
              Temp = tabl(l)@
 
 
              tabl(l) = tabl(p)@
 
 
              tabl(p) = Temp@
 
 
     
  @
 
 
              temp1 = tabl2(l)@
 
 
              tabl2(l) = tabl2(p)@
 
 
              tabl2(p) = temp1@
 
 
   @
 
 
   @
 
 
     
  @
 
 
              l = l + 1@
 
 
              p = p - 1@
 
 
          
  End If@
 
 
       
  Loop Until l >= p@
 
 
       
  Call SortowanieDwoch(tabl, tabl2, lngMin, p)@
 
 
       
  Call SortowanieDwoch(tabl, tabl2, l, lngMax)@
 
 
    
  End If@
 
 
  End Sub@
 

