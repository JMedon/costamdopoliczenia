Global wynikInSample As Double, sredniZysk As Double, sharpeRatio As Double, sredniZyskALL As Double, typeALL As Double, progOne As Double, progTwo As DoublePublic Type Par   min As Double   max As Double   start As Double   end  As DoubleEnd TypeSub Algo1()   '---------------------------------------------------------------------------------------   ' Method : Algo   ' Author : Jakub Medon   ' Date   : 2016-11-24   ' Purpose: algo sort   ' TODO:   '   '        *4 zmienne X   '        *Algosort   '        *dodanie nonstop L/ S do wyniku   '        *wygenerowanie wyniku do pliku   '        *wygenerowanie tasmy kierunkow do pliku   '        *   'Input Settings:   'inSample.start   'inSample.end   'outSample.end   '   'data   'X   'Y   '   'X_type - X variable type: nominal or return '1=nominal 2=returns   '      '--------------------------------------------------------------------------------------- '  On Error GoTo MojaProce_Error   With Application      .ScreenUpdating = False      .Calculation = xlCalculationManual      .UseSystemSeparators = False      .DecimalSeparator = "."   End With'-START---------------------------------------------------Dim inSample As ParDim outSample As ParinSample.start = 200001010000#inSample.end = 201501010000#outSample.end = 201601010000#'X_type = 2 '1=nominal 2=returns'####################### count rozmiarWierszy ######################'count number of event in variableSet fs = CreateObject("Scripting.FileSystemObject")PATCHstr = "C:\Users\medonj\MOJE\model sortowania\In"ChDir PATCHstrstrplik = Dir(PATCHstr & "\*.csv") '#    Open PATCHstr & "\" & strplik For Input As #3rozmiarWierszy = 0Do While Not EOF(3)    Line Input #3, Textline        rozmiarWierszy = rozmiarWierszy + 1LoopClose #3    '####################### 'read data ######################ReDim Temp(1 To rozmiarWierszy, 1 To 6) As DoubleReDim TempOut(1 To rozmiarWierszy, 1 To 6) As DoubleReDim TempAll(1 To rozmiarWierszy, 1 To 6) As DoubleOpen PATCHstr & "\" & strplik For Input As #3i = 1e = 1X_Last = 0Do While Not EOF(3)    Line Input #3, Textline    Arrcells = Split(Textline, ",")    Data_temp = Val(Arrcells(0))    X_temp = Val(Arrcells(1))    Y_temp = Val(Arrcells(2))        'In sample data    If Data_temp > inSample.start And Data_temp < inSample.end And X_temp <> "" And Y_temp <> 0 Then        Temp(i, 1) = Data_temp        Temp(i, 2) = X_temp        Temp(i, 3) = Y_temp        Temp(i, 4) = X_temp - X_Last        If i = 1 Then            Temp(i, 5) = X_temp / 1            Temp(i, 6) = Temp(i, 4) / 1        Else            Temp(i, 5) = X_temp / Temp(i - 1, 3)            Temp(i, 6) = Temp(i, 4) / Temp(i - 1, 3)        End If                        i = i + 1    End If    X_Last = X_temp        'Out of sample data    If Data_temp >= inSample.end And Data_temp < outSample.end And X_temp <> "" And Y_temp <> 0 Then        TempOut(e, 1) = Data_temp        TempOut(e, 2) = X_temp        TempOut(e, 3) = Y_temp        TempOut(e, 4) = X_temp - X_Last        If e = 1 Then            TempOut(e, 5) = X_temp / 1            TempOut(e, 6) = TempOut(e, 4) / 1        Else            TempOut(e, 5) = X_temp / TempOut(e - 1, 3)            TempOut(e, 6) = TempOut(e, 4) / TempOut(e - 1, 3)        End If                e = e + 1    End If        X_Last = X_tempLoopClose #3'####################### generate filtered variables ######################'rozmiarWierszy = irozmiarOut = e'in sampleReDim D(1 To rozmiarWierszy) As DoubleReDim X(1 To rozmiarWierszy) As DoubleReDim X_return(1 To rozmiarWierszy) As DoubleReDim X_div(1 To rozmiarWierszy) As DoubleReDim X_div_return(1 To rozmiarWierszy) As DoubleReDim Y(1 To rozmiarWierszy) As DoubleFor u = 1 To rozmiarWierszy    D(u) = Temp(u, 1)    X(u) = Temp(u, 2)    Y(u) = Temp(u, 3)    X_return(u) = Temp(u, 4)    X_div(u) = Temp(u, 5)    X_div_return(u) = Temp(u, 6)Next u'out of sampleReDim D_Out(1 To rozmiarOut) As DoubleReDim X_Out(1 To rozmiarOut) As DoubleReDim X_return_Out(1 To rozmiarOut) As DoubleReDim X_div_Out(1 To rozmiarOut) As DoubleReDim X_div_return_Out(1 To rozmiarOut) As DoubleReDim Y_Out(1 To rozmiarOut) As DoubleReDim K_nominal(1 To rozmiarOut) As DoubleReDim K_Sharpe(1 To rozmiarOut) As DoubleFor u = 1 To rozmiarOut    D_Out(u) = TempOut(u, 1)    X_Out(u) = TempOut(u, 2)    Y_Out(u) = TempOut(u, 3)    X_return_Out(u) = TempOut(u, 4)    X_div_Out(u) = TempOut(u, 5)    X_div_return_Out(u) = TempOut(u, 6)Next u'All sampleReDim D_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim X_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim X_return_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim X_div_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim X_div_return_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim X_best(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim Y_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim K_nominal_All(1 To rozmiarWierszy + rozmiarOut) As DoubleReDim K_Sharpe_All(1 To rozmiarWierszy + rozmiarOut) As DoubleFor u = 1 To rozmiarWierszy + rozmiarOut    If u <= rozmiarWierszy Then        D_All(u) = D(u)        X_All(u) = X(u)        Y_All(u) = Y(u)        X_return_All(u) = X_return(u)        X_div_All(u) = X_div(u)        X_div_return_All(u) = X_div_return(u)    Else        D_All(u) = D_Out(u - rozmiarWierszy)        X_All(u) = X_Out(u - rozmiarWierszy)        Y_All(u) = Y_Out(u - rozmiarWierszy)        X_return_All(u) = X_return_Out(u - rozmiarWierszy)        X_div_All(u) = X_div_Out(u - rozmiarWierszy)        X_div_return_All(u) = X_div_return_Out(u - rozmiarWierszy)    End IfNext uReDim wynik(1 To 5, 1 To 2) As DoubleDebug.Print "###############"lewy = LBound(X, 1):    prawy = UBound(X, 1)'####################### Algo Sort nominal ######################'SortowanieDwoch X, Y, lewy, prawywynik(1, 1) = AlgoSortNow(rozmiarWierszy, X, Y, sredniZyskALL, typeALL, progOne, progTwo)Debug.Print "AlgoSort nominal:"; sredniZyskALL, typeALL, progOne, progTwowynik(1, 2) = wynikOutofSample(rozmiarOut, X_Out, Y_Out, K_nominal, K_Sharpe, wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)Debug.Print "wynik AlgoSort nominal: ", rozmiarOut; wynik(1, 2); wynik(1, 1); sredniZysk; sharpeRatio; typeALL; progOne; progTwo'####################### Algo Sort returns ######################'SortowanieDwoch X_return, Y, lewy, prawywynik(2, 1) = AlgoSortNow(rozmiarWierszy, X_return, Y, sredniZyskALL, typeALL, progOne, progTwo)Debug.Print "AlgoSort returns:"; sredniZyskALL, typeALL, progOne, progTwowynik(2, 2) = wynikOutofSample(rozmiarOut, X_return_Out, Y_Out, K_nominal, K_Sharpe, wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)Debug.Print "wynik AlgoSort returns: ", rozmiarOut; wynik(2, 2); wynik(2, 1); sredniZysk; sharpeRatio; typeALL; progOne; progTwo'####################### Algo Sort div ######################'SortowanieDwoch X_div, Y, lewy, prawywynik(3, 1) = AlgoSortNow(rozmiarWierszy, X_div, Y, sredniZyskALL, typeALL, progOne, progTwo)Debug.Print "AlgoSort returns:"; sredniZyskALL, typeALL, progOne, progTwowynik(3, 2) = wynikOutofSample(rozmiarOut, X_div_Out, Y_Out, K_nominal, K_Sharpe, wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)Debug.Print "wynik AlgoSort div : ", rozmiarOut; wynik(3, 2); wynik(3, 1); sredniZysk; sharpeRatio; typeALL; progOne; progTwo'####################### Algo Sort div return ######################'SortowanieDwoch X_div_return, Y, lewy, prawywynik(4, 1) = AlgoSortNow(rozmiarWierszy, X_div_return, Y, sredniZyskALL, typeALL, progOne, progTwo)Debug.Print "AlgoSort returns:"; sredniZyskALL, typeALL, progOne, progTwowynik(4, 2) = wynikOutofSample(rozmiarOut, X_div_return_Out, Y_Out, K_nominal, K_Sharpe, wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)Debug.Print "wynik AlgoSort div rtrns: ", rozmiarOut; wynik(4, 2); wynik(4, 1); sredniZysk; sharpeRatio; typeALL; progOne; progTwoDebug.Print wynik(1, 1); wynik(2, 1); wynik(3, 1); wynik(4, 1)'choose best X variableFor u = 1 To 4    If wynik(u, 2) < 0 Then        wynik(u, 1) = 0    End IfNext ubestWynik = -100bestVariable = 0For u = 1 To 4    If wynik(u, 1) > bestWynik Then        bestVariable = u        bestWynik = wynik(u, 1)    End IfNext urozmiarALL = rozmiarWierszy + rozmiarOutDebug.Print bestVariableIf bestVariable = 0 Then    Debug.Print "nie ma zyskownej w out of sample"Else    For u = 1 To rozmiarWierszy + rozmiarOut        If bestVariable = 1 Then            X_best(u) = X_All(u)        ElseIf bestVariable = 2 Then            X_best(u) = X_return_All(u)        ElseIf bestVariable = 3 Then            X_best(u) = X_div_All(u)        ElseIf bestVariable = 4 Then            X_best(u) = X_div_return_All(u)        End If    Next u    '####################### Algo Sort All ######################'    lewy = LBound(Y_All, 1):    prawy = UBound(Y_All, 1)    Debug.Print X_best(180); X_div_All(180); rozmiarALL    SortowanieDwoch X_best, Y_All, lewy, prawy    wynik(5, 1) = AlgoSortNow(rozmiarALL, X_best, Y_All, sredniZyskALL, typeALL, progOne, progTwo)    Debug.Print "AlgoSort All:"; sredniZyskALL, typeALL, progOne, progTwo    wynik(5, 2) = wynikOutofSample(rozmiarALL, X_best, Y_All, K_nominal_All, K_Sharpe_All, wynikInSample, sredniZysk, sharpeRatio, typeALL, progOne, progTwo)    Debug.Print "wynik AlgoSort All: ", rozmiarALL; wynik(5, 2); wynik(5, 1); sredniZysk; sharpeRatio; typeALL; progOne; progTwo; ,End If'-END---------------------------------------------------MojaProce_Error:   With Application      .Calculation = xlCalculationAutomatic      .ScreenUpdating = True      .CutCopyMode = False   End WithEnd Sub
